# This is called after the deployed environment is ready to be checked
name: Regularly scheduled check links
on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Site to check for broken links'
        required: true
        type: string
        default: 'https://clubcarwash.com/'

jobs:
  check-links:
    name: Check links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install linkchecker
        id: install-linkchecker
        run: |
          pip3 install linkchecker

      - name: checkout xml to markdown
        uses: actions/checkout@v3
        with:
          repository: gilzow/XML-to-Markdown-Parser

      - name: install-parser
        run: |
          pip3 install -r requirements.txt

      - name: Run linkchecker
        id: run-link-checker
        continue-on-error: true
        shell: bash
        run: |
          echo "::notice::Scanning ${{ inputs.url }} for broken links."
          # if linkchecker exits with a non-zero then it means broken links were found. 
          scan=$(linkchecker ${{ inputs.url }} -F xml/utf_8/brokenlinks.xml)
          result=$?
          if [[ $result -ne 0 ]]; then
            echo "::notice::Broken links detected."
          fi


      - name: Convert xml to markdown
        if: ${{ steps.run-link-checker.outcome == 'failure' }}
        run: |
          python3 xmlTomd.py brokenlinks.xml > broken_links.md

      - name: Report no broken links
        if: ${{ steps.run-link-checker.outcome == 'success' }}
        run: |
          echo "::notice::No broken links were detected"

      - name: Create issue from Markdown file
        id: create-issue
        if: ${{ steps.run-link-checker.outcome == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            var fs = require('fs');
            var bodyMsg = fs.readFileSync('broken_links.md','utf8');
            failMsg = 'Broken links detected'

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: failMsg,
              body: bodyMsg,
              labels: ['broken-links'],
            })

