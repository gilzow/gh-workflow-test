# This is called after the deployed environment is ready to be checked
name: Regularly scheduled check links
on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Site to check for broken links'
        required: true
        type: string
        default: 'https://clubcarwash.com/'

jobs:
  check-links:
    name: Check links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install linkchecker
        id: install-linkchecker
        run: |
          pip3 install linkchecker

      - name: checkout xml to markdown
        uses: actions/checkout@v3
        with:
          repository: gilzow/XML-to-Markdown-Parser

      - name: install-parser
        run: |
          pip3 install -r requirements.txt

#      - uses: actions/setup-node@v3
#        with:
#          node-version: 18

#      - name: install xml to json converter
#        id: install-csvtojson
#        run: |
#          npm install -g xml2json-cli

      - name: Run linkchecker
        id: run-link-checker
        shell: bash
        run: |
          linkchecker ${{ inputs.url }} -F xml/utf_8/brokenlinks.xml

#      - name: convert XML to JSON
#        id: convert-xml-to-json
#        shell: bash
#        run: |
#          xml2json carwash.xml carwash.json

#      - name: Create Markdown file of broken links
#        if: ${{ always() }}
#        run: |
#          data=broken_links.json
#
#          # Get length of broken links array
#          eval "$( jq -r '@sh "urls_length=\(.|length)"' "$data" )"
#
#          # Check if any links are broken
#          if [ -z "$urls_length" ]; then
#            ":tada: There are no broken links! :tada:" > broken_links.md
#          else
#            echo -e "The following pages had broken links to check and possibly fix:\n" > broken_links.md
#
#            # Loop through the broken URLs to create items
#            for (( i = 0; i < urls_length; ++i )); do
#              unset location
#              unset broken_links
#              unset error
#
#              # Get the location where the broken link was found
#              eval "$(
#                  jq -r --argjson i "$i" '
#                      .[$i] |
#                      @sh "location=\(.url)"' "$data"
#              )"
#              echo "- $location" >> broken_links.md
#
#              # Loop through the broken links
#              jq -r --argjson i "$i" '.[$i] ' "$data" |
#              # Get the specific broken link and its error
#              jq -r '.links[] | (.url, .error)' |
#              while IFS= read -r url ; do
#                  IFS= read -r error
#                  # Output that as a checklist item
#                  echo "  - [ ] $error: $url" >> broken_links.md
#              done
#            done
#          fi

      - name: Convert xml to markdown
        run: |
          python3 xmlTomd.py brokenlinks.xml > broken_links.md

      - name: Create issue from Markdown file
        id: create-issue
        if: ${{ always() }}
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: ":bug: Broken links"
          content-filepath: broken_links.md